/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ymuh;



import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;



import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App {
    
    
    public String getGreeting() {
        return "Hello world.";
    }

    public static Integer birikim(ArrayList<Integer> array, int maas, int gider, int anapara){


    


        if(array == null){
            System.out.println("Array içerisinde değer mevcut değil");
        }
        
       
        int islem = maas - gider / 12 + anapara;
        array.add(maas);
        array.add(gider);
        array.add(anapara);
        
        return  islem;

        
    }

    public static void main(String[] args) {
        port(getHerokuAssignedPort());
        get("/", (req, res) -> "Merhaba Dünya");
        post("/compute", (req, res) -> {
            int maasInput = Integer.parseInt(req.queryParams("input1")) ;
            int giderInput = Integer.parseInt(req.queryParams("input2")) ;
            int anaparaInput = Integer.parseInt(req.queryParams("input3")) ;
           
           
            java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
            
                inputList.add(maasInput);
                inputList.add(giderInput);
                inputList.add(anaparaInput);
            
         
            System.out.println(inputList);
         
            int maas = inputList.get(0);
            int gider = inputList.get(1);
            int anapara = inputList.get(2);
            int result = App.birikim(inputList, maasInput, giderInput, anaparaInput);
            
            
            Map<String, Integer> map = new HashMap<String, Integer>();
            map.put("result", result );
            map.put("maas", maas );
            map.put("gider", gider );
            map.put("anapara", anapara );
            return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());
        get("/compute",
                (rq, rs) -> {
                    Map<String, String> map = new HashMap<String, String>();
                    map.put("result", "Deger bulunamadı");
                    return new ModelAndView(map, "compute.mustache");
                },
                new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; // return default port if heroku-port isn't set (i.e. on localhost)
    }
}

